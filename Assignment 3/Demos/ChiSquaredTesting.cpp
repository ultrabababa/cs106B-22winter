#include "ChiSquaredTesting.h"
#include "GUI/TextUtils.h"
#include "error.h"
#include <iostream>
#include <cmath>
#include <cfloat>
#include <climits>
#include <algorithm>
#include <iomanip>
using namespace std;

namespace {
    constexpr int kNumSamples = 100000;

    /* Precomputed table of threshold chi-squared values
     * for the given number of degrees of freedom with
     * a p-value of 1e-6.
     */
    constexpr int kMaxProbabilities = 250;
    constexpr double kMaxChiSquaredValues[kMaxProbabilities + 1] = {
        -1,
        27.6310211159285,
        30.6648497062136,
        33.3768415817198,
        35.8881868796729,
        38.2583363772097,
        40.5218312341799,
        42.7009139265443,
        44.8109378706878,
        46.8630468467844,
        48.8656427632036,
        50.8252521388745,
        52.747068114203,
        54.6353055300388,
        56.4934424997734,
        58.3243900143889,
        60.1306142359801,
        61.9142267162558,
        63.677052285678,
        65.4206810350478,
        67.1465087324731,
        68.8557686807224,
        70.549557136886,
        72.2288538201443,
        73.8945386228681,
        75.5474053523046,
        77.1881731247923,
        78.817495885853,
        80.4359704204925,
        82.0441431370428,
        83.6425158470045,
        85.231550717099,
        86.8116745342632,
        88.3832823968413,
        89.9467409237738,
        91.5023910566883,
        93.0505505163978,
        94.591515964607,
        96.1255649130182,
        97.6529574150631,
        99.1739375698151,
        100.688734862999,
        102.197565366189,
        103.700632812139,
        105.198129561548,
        106.690237474391,
        108.177128697098,
        109.658966375311,
        111.135905300675,
        112.608092498962,
        114.075667765922,
        115.538764156447,
        116.997508431914,
        118.452021470008,
        119.902418640819,
        121.348810152524,
        122.791301369631,
        124.229993106394,
        125.664981897733,
        127.096360249736,
        128.524216871583,
        129.948636890567,
        131.369702051687,
        132.787490903142,
        134.202078968938,
        135.61353890967,
        137.021940672474,
        138.427351631015,
        139.82983671631,
        141.22945853912,
        142.626277504555,
        144.020351919493,
        145.411738093359,
        146.800490432762,
        148.186661530429,
        149.570302248867,
        150.951461799121,
        152.330187814975,
        153.706526422919,
        155.080522308171,
        156.452218777021,
        157.821657815752,
        159.18888014635,
        160.553925279239,
        161.9168315632,
        163.277636232693,
        164.636375452712,
        165.99308436135,
        167.347797110207,
        168.700546902775,
        170.051366030919,
        171.400285909579,
        172.74733710978,
        174.092549390067,
        175.43595172645,
        176.777572340938,
        178.117438728753,
        179.455577684291,
        180.7920153259,
        182.126777119547,
        183.459887901427,
        184.791371899567,
        186.121252754501,
        187.449553539032,
        188.776296777161,
        190.101504462204,
        191.425198074146,
        192.747398596277,
        194.068126531137,
        195.387401915807,
        196.705244336585,
        198.021672943069,
        199.336706461675,
        200.65036320863,
        201.962661102447,
        203.273617675925,
        204.583250087681,
        205.891575133241,
        207.19860925572,
        208.504368556091,
        209.808868803079,
        211.112125442688,
        212.414153607379,
        213.714968124916,
        215.014583526891,
        216.313014056946,
        217.610273678707,
        218.906376083434,
        220.201334697405,
        221.495162689048,
        222.787872975824,
        224.079478230876,
        225.369990889458,
        226.659423155139,
        227.94778700581,
        229.235094199484,
        230.521356279912,
        231.806584582009,
        233.090790237114,
        234.373984178073,
        235.65617714416,
        236.937379685847,
        238.217602169421,
        239.496854781455,
        240.775147533146,
        242.052490264513,
        243.328892648469,
        244.604364194771,
        245.878914253848,
        247.152552020516,
        248.425286537581,
        249.697126699338,
        250.968081254962,
        252.238158811807,
        253.507367838603,
        254.775716668561,
        256.043213502399,
        257.309866411265,
        258.575683339593,
        259.840672107871,
        261.104840415329,
        262.368195842561,
        263.630745854067,
        264.89249780073,
        266.153458922223,
        267.41363634935,
        268.67303710633,
        269.931668113007,
        271.18953618702,
        272.446648045897,
        273.703010309102,
        274.958629500036,
        276.213512047969,
        277.46766428994,
        278.721092472593,
        279.973802753975,
        281.225801205289,
        282.477093812596,
        283.727686478479,
        284.977585023665,
        286.226795188605,
        287.475322635021,
        288.723172947401,
        289.970351634477,
        291.216864130646,
        292.462715797377,
        293.707911924569,
        294.952457731884,
        296.196358370043,
        297.4396189221,
        298.682244404676,
        299.92423976917,
        301.165609902943,
        302.406359630469,
        303.646493714461,
        304.886016856979,
        306.1249337005,
        307.363248828974,
        308.600966768848,
        309.838091990078,
        311.074628907104,
        312.310581879817,
        313.545955214494,
        314.780753164719,
        316.014979932282,
        317.248639668056,
        318.481736472861,
        319.714274398298,
        320.94625744758,
        322.177689576335,
        323.408574693391,
        324.638916661553,
        325.868719298353,
        327.097986376798,
        328.326721626081,
        329.554928732305,
        330.782611339164,
        332.009773048635,
        333.236417421632,
        334.462547978667,
        335.688168200488,
        336.913281528701,
        338.13789136639,
        339.362001078711,
        340.585613993487,
        341.808733401783,
        343.031362558472,
        344.253504682792,
        345.475162958887,
        346.696340536343,
        347.917040530709,
        349.137266024011,
        350.357020065256,
        351.576305670923,
        352.795125825448,
        354.013483481699,
        355.231381561442,
        356.448822955796,
        357.665810525685,
        358.882347102271,
        360.098435487394,
        361.31407845399,
        362.529278746507,
        363.744039081321,
        364.95836214712,
        366.172250605317,
        367.385707090422,
        368.598734210428,
        369.811334547179,
        371.02351065674,
    };
}

bool ChiSquaredTesting::isClose(const vector<double>& probabilities,
                                function<int ()> experiment) {
    /* If there are no classes or just one class, then yes, we pass! */
    if (probabilities.size() <= 1) {
        return true;
    }

    /* We are limited in what sample sizes we can measure. */
    if (probabilities.size() > kMaxProbabilities) {
        error("Number of outcomes too large for chi squared testing.");
    }

    /* Run the experiment and build a frequency histogram. */
    vector<int> frequencies(probabilities.size());
    for (int i = 0; i < kNumSamples; i++) {
        int result = experiment();
        if (result < 0 || result >= int(frequencies.size())) {
            error(format("Illegal experiment outcome: %s (valid range is 0 to %s).", result, frequencies.size() - 1));
        }
        frequencies[result]++;
    }

    /* Compute the chi-squared statistic. */
    double chiSquared = 0.0;
    size_t numNonzero = 0;
    for (size_t i = 0; i < probabilities.size(); i++) {
        /* Special-case impossible events. */
        if (probabilities[i] == 0) {
            if (frequencies[i] != 0) {
                return false;
            }
        }
        /* Otherwise there is no deviation. */
        else {
            double deviation = (frequencies[i] - probabilities[i] * kNumSamples);
            chiSquared += deviation * deviation / (probabilities[i] * kNumSamples);
            numNonzero++;
        }
    }
    return chiSquared < kMaxChiSquaredValues[numNonzero - 1];
}
